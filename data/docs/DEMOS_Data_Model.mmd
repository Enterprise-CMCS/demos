---
title: DEMOS Data Model
config:
  theme: default
  layout: elk
  elk:
    nodePlacementStrategy: NETWORK_SIMPLEX
---

erDiagram
  classDef staticConstraint stroke:red,fill:pink
  classDef unenforcedConstraint stroke:orange,fill:palegoldenrod
  classDef typeLimiter stroke:navy,fill:lightskyblue
  classDef dataTable stroke:green,fill:lightgreen
  classDef associativeTable stroke:darkmagenta,fill:plum
  classDef legend stroke:black,fill:#ddd

  phase_status ||--|{ application_phase  : "FK004"
  phase_date_type }|--|| phase : "FK003"
  phase_date_type }|--|| date_type: "FK017"
  application_phase }|--|| application : "FK005"
  date_type ||--|{ application_date  : "FK001"
  application_date }|--|| application : "FK002"
  application_phase }|--|| phase : "FK006"
  application }|--|| application_type : "FK007"
  application ||--|| demonstration : "FK008"
  application ||--|| extension : "FK009"
  application ||--|| amendment : "FK058"
  demonstration }|--|| sdg_division : "FK010"
  demonstration }|--|| signature_level : "FK011"
  demonstration ||--|{ extension : "FK012"
  demonstration ||--|{ amendment : "FK059"
  application_type ||--|{ demonstration_application_type_limit : "FK013"
  demonstration_application_type_limit ||--|{ demonstration : "FK014"
  application_type ||--|{ extension_application_type_limit : "FK015"
  extension_application_type_limit ||--|{ extension : "FK016"
  application_type ||--|{ amendment_application_type_limit : "FK060"
  amendment_application_type_limit ||--|{ amendment : "FK061"
  application_status ||--|{ application : "FK018"
  phase ||--|{ application : "FK020"
  state ||--|{ demonstration : "FK021"
  person }|--|| person_type : "FK022"
  person ||--|| users : "FK023"
  person_type ||--|| user_person_type_limit : "FK024"
  user_person_type_limit ||--|{ users : "FK025"
  users ||--|{ document : "FK026"
  users ||--|{ document_pending_upload : "FK019"
  phase ||--|{ phase_document_type : "FK027"
  phase_document_type }|--|| document_type : "FK028"
  phase_document_type ||--|{ document : "FK029"
  phase_document_type ||--|{ document_pending_upload : "FK055"
  application ||--|{ document : "FK030"
  application ||--|{ document_pending_upload : "FK056"
  role_person_type }|--|| person_type : "FK031"
  role ||--|{ role_person_type : "FK032"
  role ||--|{ role_permission : "FK033"
  permission ||--|{ role_permission : "FK034"
  grant_level ||--|{ role : "FK035"
  grant_level ||--|{ permission : "FK036"
  system_grant_level_limit ||--|{ system_role_assignment : "FK041"
  system_role_assignment }|--|| role_person_type : "FK038"
  person ||--|{ system_role_assignment : "FK039"
  system_role_assignment }|--|| role : "FK040"
  grant_level ||--|| system_grant_level_limit : "FK037"
  demonstration_role_assignment }|--|| person_state : "FK042"
  person_state }|--|| state : "FK043"
  person ||--|{ person_state : "FK044"
  grant_level ||--|| demonstration_grant_level_limit : "FK045"
  demonstration_grant_level_limit ||--|{ demonstration_role_assignment : "FK046"
  role_person_type ||--|{ demonstration_role_assignment : "FK047"
  person ||--|{ demonstration_role_assignment : "FK048"
  role ||--|{ demonstration_role_assignment : "FK049"
  demonstration_role_assignment }|--|| demonstration : "FK050"
  demonstration_role_assignment ||--|| primary_demonstration_role_assignment : "FK051"
  event }|--|| application : "FK057"
  event }O..|| reportable_event_type : "FK052"
  role ||--|{ event : "FK053"
  event }|--|| users : "FK054"

  %% Static Constraints
  application_status:::staticConstraint {
    text id PK
  }

  application_type:::staticConstraint {
    text id PK
  }

  sdg_division:::staticConstraint {
    text id PK
  }

  date_type:::staticConstraint {
    text id PK
  }

  document_type:::staticConstraint {
    text id PK
  }

  grant_level:::staticConstraint {
    text id PK
  }

  person_type:::staticConstraint {
    text id PK
  }

  permission:::staticConstraint {
    text id PK, UK "UK: (id, grant_level_id)"
    text grant_level_id FK, UK "FK036: grant_level_id ∈ grant_level.id<br>UK: (id, grant_level_id)"
  }

  phase:::staticConstraint {
    text id PK
    integer phase_number UK
  }

  phase_status:::staticConstraint {
    text id PK
  }

  role:::staticConstraint {
    text id PK, UK "UK: (id, grant_level_id)"
    text grant_level_id FK, UK "FK035: grant_level_id ∈ grant_level.id<br>UK: (id, grant_level_id)"
  }

  signature_level:::staticConstraint {
    text id PK
  }

  state:::staticConstraint {
    text id PK
    text name
  }

  %% Unenforced Constraints
  reportable_event_type:::unenforcedConstraint {
    text id PK
  }

  %% Type Limiters
  amendment_application_type_limit:::typeLimiter {
    text id PK, FK "FK060: id ∈ application_type.id"
  }

  demonstration_application_type_limit:::typeLimiter {
    text id PK, FK "FK013: id ∈ application_type.id"
  }

  demonstration_grant_level_limit:::typeLimiter {
    text id PK, FK "FK045: id ∈ grant_level.id"
  }

  extension_application_type_limit:::typeLimiter {
    text id PK, FK "FK015: id ∈ application_type.id"
  }

  system_grant_level_limit:::typeLimiter {
    text id PK, FK "FK037: id ∈ grant_level.id"
  }

  user_person_type_limit:::typeLimiter {
    text id PK, FK "FK024: id ∈ person_type.id"
  }

  %% Data Tables
  amendment:::dataTable {
    uuid id PK, FK "FK058: (id, application_type_id) ∈ application.(id, application_type_id) DEFERRED"
    text application_type_id FK "FK058: (id, application_type_id) ∈ application.(id, application_type_id) DEFERRED<br>FK061: application_type_id ∈ amendment_application_type_limit.id"
    uuid demonstration_id FK "FK059: demonstration_id ∈ demonstration.id"
    timestamptz created_at
    timestamptz updated_at
    BEFORE_DELETE_TRIGGER check_that_main_record_deleted_from_application_trigger "Before deletion, verify that no corresponding record exists in the application table."
  }

  application:::dataTable {
    uuid id PK, UK "UK: (id, application_type_id)"
    text application_type_id FK, UK "FK007: application_type_id ∈ application_type.id<br>UK: (id, application_type_id)"
    text name
    text description "NULLABLE"
    date effective_date "NULLABLE"
    date expiration_date "NULLABLE"
    text application_status_id FK "FK018: application_status_id ∈ application_status.id"
    text current_phase_id FK "FK020: current_phase_id ∈ phase.id"
    timestamptz created_at
    timestamptz updated_at
    CONSTRAINT_CHECK check_non_empty_name "Validate that the name is not empty or only whitespace."
    CONSTRAINT_CHECK effective_date_check "Validate that the effective date is before the expiration date."
    CONSTRAINT_TRIGGER_DEFERRABLE check_application_type_record_exists_trigger "On insert or update, verify that a corresponding record exists in the demonstration, amendment, or extension tables."
  }

  application_date:::dataTable {
    uuid application_id PK, FK "FK002: application_id ∈ application.id"
    text date_type_id PK, FK "FK001: date_type_id ∈ date_type.id"
    timestamptz date_value
    timestamptz created_at
    timestamptz updated_at
  }

  application_phase:::dataTable {
    uuid application_id PK, FK "FK005: application_id ∈ application.id"
    text phase_id PK, FK "FK006: phase_id ∈ phase.id"
    text phase_status_id FK "FK004: phase_status_id ∈ phase_status.id"
    timestamptz created_at
    timestamptz updated_at
  }

  demonstration:::dataTable {
    uuid id PK, FK, UK "FK008: (id, application_type_id) ∈ application.(id, application_type_id) DEFERRED<br>UK: (id, state_id)"
    text application_type_id FK "FK008: (id, application_type_id) ∈ application.(id, application_type_id) DEFERRED<br>FK014: application_type_id ∈ demonstration_application_type_limit.id"
    text sdg_division_id FK "FK010: sdg_division_id ∈ sdg_division.id<br>NULLABLE"
    text signature_level_id FK "FK011: signature_level_id ∈ signature_level.id<br>NULLABLE"
    text state_id FK, UK "FK021: state_id ∈ state.id<br>UK: (id, state_id)"
    timestamptz created_at
    timestamptz updated_at
    CONSTRAINT_TRIGGER_DEFERRABLE check_demonstration_primary_project_officer_trigger "On insert or update, check that a primary project officer exists for this demonstration."
    BEFORE_DELETE_TRIGGER check_that_main_record_deleted_from_application_trigger "Before deletion, verify that no corresponding record exists in the application table."
  }

  document:::dataTable {
    uuid id PK
    text name
    text description
    text s3_path
    uuid owner_user_id FK "FK026: owner_user_id ∈ users.id"
    text document_type_id FK "FK029: (phase_id, document_type_id) ∈ phase_document_type.(phase_id, document_type_id)"
    uuid application_id FK "FK030: application_id ∈ application.id"
    text phase_id FK "FK029: (phase_id, document_type_id) ∈ phase_document_type.(phase_id, document_type_id)"
    timestamptz created_at
    timestamptz updated_at
    CONSTRAINT_CHECK check_non_empty_name "Validate that the name is not empty or only whitespace."
    CONSTRAINT_CHECK check_non_empty_description "Validate that the description is not empty or only whitespace."
    CONSTRAINT_CHECK check_non_empty_s3_path "Validate that the S3 path is not empty or only whitespace."
    CONSTRAINT_CHECK check_s3_path_start "Validate that the S3 path starts with s3://."
  }

  document_pending_upload:::dataTable {
    uuid id PK
    text name
    text description
    uuid owner_user_id FK "FK019: owner_user_id ∈ users.id"
    text document_type_id FK "FK055: (phase_id, document_type_id) ∈ phase_document_type.(phase_id, document_type_id)"
    uuid application_id FK "FK056: application_id ∈ application.id"
    text phase_id FK "FK055: (phase_id, document_type_id) ∈ phase_document_type.(phase_id, document_type_id)"
    timestamptz created_at
    timestamptz updated_at
  }

  event:::dataTable {
    uuid id PK
    uuid user_id FK "FK054: user_id ∈ users.id<br>NULLABLE"
    text with_role_id FK "FK053: with_role_id ∈ role.id<br>NULLABLE"
    uuid application_id FK "FK057: application_id ∈ application.id<br>NULLABLE"
    text event_type FK "FK052: ⊂(event_type) ∈ reportable_event_type.id (unenforced)"
    text log_level
    text route
    timestamptz created_at
    jsonb event_data
  }

  extension:::dataTable {
    uuid id PK, FK "FK009: (id, application_type_id) ∈ application.(id, application_type_id) DEFERRED"
    text application_type_id FK "FK009: (id, application_type_id) ∈ application.(id, application_type_id) DEFERRED<br>FK016: application_type_id ∈ extension_application_type_limit.id"
    uuid demonstration_id FK "FK012: demonstration_id ∈ demonstration.id"
    timestamptz created_at
    timestamptz updated_at
    BEFORE_DELETE_TRIGGER check_that_main_record_deleted_from_application_trigger "Before deletion, verify that no corresponding record exists in the application table."
  }

  person:::dataTable {
    uuid id PK, UK "UK: (id, person_type_id)"
    text person_type_id FK "FK022: person_type_id ∈ person_type.id<br>UK: (id, person_type_id)"
    text email
    text first_name
    text last_name
    timestamptz created_at
    timestamptz updated_at
  }

  users:::dataTable {
    uuid id PK, FK, UK "FK023: (id, person_type_id) ∈ person.(id, person_type_id)<br>UK: (id, person_type_id)"
    text person_type_id FK "FK023: (id, person_type_id) ∈ person.(id, person_type_id)<br>FK025: person_type_id ∈ user_person_type_limit.id<br>UK: (id, person_type_id)"
    uuid cognito_subject UK "UK: cognito_subject"
    text username
    timestamptz created_at
    timestamptz updated_at
  }

  %% Associative Tables
  demonstration_role_assignment:::associativeTable {
    uuid person_id PK, FK "FK042: (person_id, state_id) ∈ person_state.(person_id, state_id)<br>FK048: (person_id, person_type_id) ∈ person.(id, person_type_id)"
    uuid demonstration_id PK, FK "FK050: (demonstration_id, state_id) ∈ demonstration.(id, state_id)"
    text role_id PK, FK "FK047: (role_id, person_type_id) ∈ role_person_type.(role_id, person_type_id)<br>FK049: (role_id, grant_level_id) ∈ role.(id, grant_level_id)"
    text state_id FK "FK042: (person_id, state_id) ∈ person_state.(person_id, state_id)<br>FK050: (demonstration_id, state_id) ∈ demonstration.(id, state_id)"
    text person_type_id FK "FK047: (role_id, person_type_id) ∈ role_person_type.(role_id, person_type_id)<br>FK048: (person_id, person_type_id) ∈ person.(id, person_type_id)"
    text grant_level_id FK "FK046: grant_level_id ∈ demonstration_grant_level_limit.id<br>FK049: (role_id, grant_level_id) ∈ role.(id, grant_level_id)"
  }

  person_state:::associativeTable {
    uuid person_id PK, FK "FK044: person_id ∈ person.id"
    text state_id PK, FK "FK043: state_id ∈ state.id"
  }

  system_role_assignment:::associativeTable {
    uuid person_id PK, FK "FK039: (person_id, person_type_id) ∈ person.(id, person_type_id)"
    text role_id PK, FK "FK038: (role_id, person_type_id) ∈ role_person_type.(role_id, person_type_id)<br>FK040: (role_id, grant_level_id) ∈ role.(id, grant_level_id)"
    text person_type_id FK "FK038: (role_id, person_type_id) ∈ role_person_type.(role_id, person_type_id)<br>FK039: (person_id, person_type_id) ∈ person.(id, person_type_id)"
    text grant_level_id FK "FK040: (role_id, grant_level_id) ∈ role.(id, grant_level_id)<br>FK041: grant_level_id ∈ system_grant_level_limit.id"
  }

  phase_date_type:::associativeTable {
    text phase_id PK, FK "FK003: phase_id ∈ phase.id"
    text date_type_id PK, FK "FK017: date_type_id ∈ date_type.id"
  }

  phase_document_type:::associativeTable {
    text phase_id PK, FK "FK027: phase_id ∈ phase.id"
    text document_type_id PK, FK "FK028: document_type_id ∈ document_type.id"
  }

  primary_demonstration_role_assignment:::associativeTable {
    uuid person_id FK, UK "FK051: (person_id, demonstration_id, role_id) ∈ demonstration_role_assignment.(person_id, demonstration_id, role_id)<br>UK: (person_id, demonstration_id, role_id)"
    uuid demonstration_id PK, FK, UK "FK051: (person_id, demonstration_id, role_id) ∈ demonstration_role_assignment.(person_id, demonstration_id, role_id)<br>UK: (person_id, demonstration_id, role_id)"
    text role_id PK, FK, UK "FK051: (person_id, demonstration_id, role_id) ∈ demonstration_role_assignment.(person_id, demonstration_id, role_id)<br>UK: (person_id, demonstration_id, role_id)"
    CONSTRAINT_TRIGGER_DEFERRABLE check_demonstration_retains_primary_project_officer_trigger "On update or delete, check that a primary project officer still exists."
  }

  role_permission:::associativeTable {
    text role_id PK, FK "FK033: (role_id, grant_level_id) ∈ role.(id, grant_level_id)"
    text grant_level_id PK, FK "FK033: (role_id, grant_level_id) ∈ role.(id, grant_level_id)<br>FK034: (permission_id, grant_level_id) ∈ permission.(id, grant_level_id)"
    text permission_id PK, FK "FK034: (permission_id, grant_level_id) ∈ permission.(id, grant_level_id)"
  }

  role_person_type:::associativeTable {
    text role_id PK, FK "FK032: role_id ∈ role.id"
    text person_type_id PK, FK "FK031: person_type_id ∈ person_type.id"
  }

  %% Legend
  Legend:::legend {
    text StaticConstraint "Red"
    text TypeLimiter "Blue"
    text AssociativeTable "Purple"
    text DataTable "Green"
    text UnenforcedConstraint "Yellow"
  }
