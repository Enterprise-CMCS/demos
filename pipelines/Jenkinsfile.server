pipeline {
  agent {
    kubernetes { 
      yaml kubeBlock(containerNames:["node", "scanner", "snyk","aws-cli"])
    }
  }
  
  options {
    disableConcurrentBuilds(abortPrevious: true)
  }

  stages {
    stage('Server - Snyk') {
      steps {
        script {
          if (hasChange("server")) {
            snykScan('server')
          }
        } 
      }
    }

    stage('Server - Lint') {
      steps {
        script {
          if (hasChange("server")) {
            dirCon('server', 'node') {
              sh '''
              npm ci
              npm run lint
              npx tsc --noEmit --skipLibCheck
              npm run build:ci
              '''
            }
          }
        }
      }
    }

    stage('Server - Unit Test') {
      steps {
        script {
          if (hasChange("server")) {
            dirCon('server', 'node') {
              sh '''
                npm run coverage:ci
                '''
            }
          } 
        }
      }
    }

    stage('Server - Concurrent Steps') {
      parallel {
        stage('Server - Sonar Scan') {
          steps {
            script {
              if (hasChange("server")) {
                sonarQubeScan(
                  projectKey: 'demos-server',
                  credentialsId: 'sonarqube-demos-server',
                  projectBaseDir: 'server',
                  sonarqubeFlags: [
                    "javascript.lcov.reportPaths": "coverage/lcov.info",
                    "testExecutionReportPaths": "coverage/test-results.xml",
                    "pullrequest.key": env.CHANGE_ID ?: null,
                    "pullrequest.branch": env.CHANGE_ID ? "${env.BRANCH_NAME}" : null,
                    "pullrequest.base": env.CHANGE_TARGET ?: null,
                    "exclusions": "**/*.test.ts,**/*.sql,seeder.ts"
                  ]
                )
              }
            }
          }
        }

        stage('Server - Validate Migrations') {
          when {
            expression {
              if (!env.CHANGE_TARGET) {
                return false
              }
              def diff = sh(
                script: "git diff --name-only origin/${env.CHANGE_TARGET}...HEAD",
                returnStdout: true
              ).trim()
              return diff.split('\n').any { it.startsWith('server/src/model/migrations/') }
            }
          }
          steps {
            assumeRole(accountNumber: env.DEMOS_AWS_NONPROD_ACCOUNT_NUMBER)
            script {
              dirCon('deployment', 'node') {
                sh """
                npm ci
                npx tsx demosctl/index test-migration dev "temp_${env.CHANGE_ID}_${currentBuild.startTimeInMillis}"
                """
              }
            }
          }
        }
      }
    }
  }
  post {
    failure {
      slackPipelineFail("Server")
    }
  }
}
