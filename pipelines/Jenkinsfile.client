@Library('demos-lib@pipeline-efficiency') _

pipeline {
  agent {
    kubernetes { 
      yaml kubeBlock(containerNames:["node", "scanner","snyk"])
    }
  }

  options {
    disableConcurrentBuilds(abortPrevious: true)
  }

  stages {
    stage('Client - Snyk') {
      when {
        expression {
          return hasChange(["lambdas", "spikes"])
        }
      }
      steps {
        echo "Ran"
        // snykScan('client')
      }
    }

    stage('Client - Lint') {
      when {
        expression {
          return hasChange(["lambdas", "spikes", "client"])
        }
      }
      steps {
          echo "Ran"
        dirCon('client', 'node') {
            // sh '''
            // npm ci
            // npm run tsc:ci
            // npm run lint:ci
            // npm run build:ci
            // '''
        }
      }
    }

    stage('Client - Unit Test') {
      when {
        expression {
          return hasChange("client")
        }
      }
      steps {
          echo "Ran"
        dirCon('client', 'node') {
          // sh '''
          //   npm run coverage:ci
          //   '''
        }
      }
    }

    stage('Client - Sonar Scan') {
      when {
        expression {
          return hasChange("client")
        }
      }
      steps {
        script {
          echo "Ran"
          // sonarQubeScan(
          //   projectKey: 'demos',
          //   credentialsId: 'sonarqube-demos-client',
          //   projectBaseDir: 'client',
          //   sonarqubeFlags: [
          //     "javascript.lcov.reportPaths": "coverage/lcov.info",
          //     "testExecutionReportPaths": "coverage/test-results.xml",
          //     "pullrequest.key": env.CHANGE_ID ?: null,
          //     "pullrequest.branch": env.CHANGE_ID ? "${env.BRANCH_NAME}" : null,
          //     "pullrequest.base": env.CHANGE_TARGET ?: null,
          //     "exclusions": "**/*.test.ts,**/*.test.tsx,src/mock-data/**,**/PhaseDateSimulation.tsx"
          //   ]
          // )
        }
      }
    }
  }

  // post {
  //   failure {
  //     slackPipelineFail("Client")
  //   }
  // }
}
