@Library('demos-lib@pipeline-efficiency') _

pipeline {
  agent {
    kubernetes { 
      yaml kubeBlock(containerNames:["node", "scanner","snyk"])
    }
  }

  options {
    disableConcurrentBuilds(abortPrevious: true)
  }

  environment {
    BUILD_ON_CHANGES = ["client", "server/src/constants.ts", "server/src/types.ts"]
  }

  stages {
    stage('Client - Snyk') {
      steps {
        script {
          if (hasChange(env.BUILD_ON_CHANGES)) {
            snykScan('client')
          }
        }
      }
    }

    stage('Client - Lint') {
      steps {
        script {
          if (hasChange(env.BUILD_ON_CHANGES)) {
            dirCon('client', 'node') {
              sh '''
              npm ci
              npm run tsc:ci
              npm run lint:ci
              npm run build:ci
              '''
            }
          }
        }
      }
    }

    stage('Client - Unit Test') {
      steps {
        script {
          if (hasChange(env.BUILD_ON_CHANGES)) {
            dirCon('client', 'node') {
              sh '''
                npm run coverage:ci
                '''
            }
          }
        }
      }
    }

    stage('Client - Sonar Scan') {
      steps {
        script {
          if (hasChange(env.BUILD_ON_CHANGES)) {
            sonarQubeScan(
              projectKey: 'demos',
              credentialsId: 'sonarqube-demos-client',
              projectBaseDir: 'client',
              sonarqubeFlags: [
                "javascript.lcov.reportPaths": "coverage/lcov.info",
                "testExecutionReportPaths": "coverage/test-results.xml",
                "pullrequest.key": env.CHANGE_ID ?: null,
                "pullrequest.branch": env.CHANGE_ID ? "${env.BRANCH_NAME}" : null,
                "pullrequest.base": env.CHANGE_TARGET ?: null,
                "exclusions": "**/*.test.ts,**/*.test.tsx,src/mock-data/**,**/PhaseDateSimulation.tsx"
              ]
            )
          }
        }
      }
    }
  }

  // post {
  //   failure {
  //     slackPipelineFail("Client")
  //   }
  // }
}
