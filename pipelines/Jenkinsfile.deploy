pipeline {
  agent {
    kubernetes { 
      yaml kubeBlock(containerNames:["node", "aws-cli"])
    }
  }

  options {
    disableConcurrentBuilds()
  }

  environment {
    NO_COLOR = 1
  }
  
  stages {
    stage('Set env from branch') {
      steps {
        script {
          env.STAGE = (env.BRANCH_NAME == 'main') ? "dev" : "${env.BRANCH_NAME}"
        }
      }
    }
    stage('Build & Test') {
      failFast true
      parallel {
        stage('Builds') {
          steps {
            script {
              assumeRole(accountNumber: env.DEMOS_AWS_NONPROD_ACCOUNT_NUMBER)
              dirCon('deployment', 'node') {
                sh """
                mkdir ../client/dist
                mkdir ../server/build

                # These are needed for the built-in CDK bundling
                apk add bash
                npm i -g esbuild
                npm i -g tsx

                npm ci
                npx tsx demosctl/index deploy:core ${env.STAGE}
                """
              }
              parallel(
                'Build Client': {
                  dirCon('deployment','node') {
                      sh "npx tsx demosctl/index build:client ${env.STAGE}"
                      
                      
                  }
                }, 'Build Server': {
                  dirCon('deployment', 'node') {
                      sh "npx tsx demosctl/index build:server ${env.STAGE}"
                  }
                }
              )
            }
          }
        }
        stage('Test Client') {
          steps {
            build(job: "Client/$BRANCH_NAME", propagate: true, wait: true)
          }
        }
        stage('Test Server') {
          steps {
            build(job: "Server/$BRANCH_NAME", propagate: true, wait: true)
          }
        }
        stage('Test CDK') {
          steps {
            build(job: "CDK/$BRANCH_NAME", propagate: true, wait: true)
          }
        }
      }
    }

    stage("Run Migrations") {
      steps {
        script {
          dirCon('deployment', 'node') {
            sh """
            npx tsx demosctl/index migrate ${env.STAGE}
            """
          }
        }
      }
      post {
        failure {
          script {
            notifyMigrationError(env.STAGE)
          }
        }
      }
    }

    stage('Deploy') {
      steps {
          script {
            dirCon('deployment','node') {
              sh "npx tsx demosctl/index deploy:all ${env.STAGE}"
            }
          }
      }
    }
  }

    post {
      success {
        slackSend(color: "good", message: "${env.STAGE.toUpperCase()} Deployment succeeded!\n\nJenkins Build: <${env.BUILD_URL}|${env.BUILD_NUMBER}>\nCommit Hash: ${env.GIT_COMMIT}")
      }
      failure {
        slackSend(color: "danger", message: "${env.STAGE.toUpperCase()} Deployment failed:\n\nJenkins Build: <${env.BUILD_URL}|${env.BUILD_NUMBER}>\nCommit Hash: ${env.GIT_COMMIT}")
      }
    }
}
