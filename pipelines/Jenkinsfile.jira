def updateAndComment(String statusId, String comment = "Status updated by Jenkins") {
  // Implementation for updating and commenting on JIRA tickets
  withEnv(["JIRA_STATUS_ID=${statusId}","JIRA_COMMENT='\"${comment}\"'"]) {
  sh '''
    echo "Updating JIRA ticket $TICKET_NUMBER to status $JIRA_STATUS_ID"
    curl -X POST \
    -H "Authorization: Bearer $JIRA_TOKEN" \
    -H "Content-Type: application/json" \
  --data '{
    "transition": {
      "id": "'$JIRA_STATUS_ID'"
    },
    "update": {
      "comment": [{
        "add": {"body": "$JIRA_COMMENT"}
      }]
    }
  }' "https://jiraent.cms.gov/rest/api/2/issue/$TICKET_NUMBER/transitions"
  '''
  }
}

pipeline {
  agent {
    kubernetes { 
      yaml kubeBlock(containerNames:["node"])
    }
  }

  options {
    disableConcurrentBuilds()
  }

  stages {
    stage('Get PR type') {
      steps {
        container("node") {
          sh "env"
          sh "apk add git"
          sh "apk add curl"
          sh "apk add jq"
          // sh "curl -s https://api.github.com/repos/Enterprise-CMCS/demos/pulls/${env.CHANGE_ID} | jq '.draft'"
          script {
            def closedIssues = sh(script: '''
            git config --global --add safe.directory $PWD
            git log $GIT_PREVIOUS_COMMIT..HEAD | grep "Closes:" | grep "DEMOS-[0-9]\\+" -i -o | tr '[:lower:]' '[:upper:]' | sort -u
            ''', returnStdout: true)

            withCredentials([string(credentialsId: 'jira-token', variable: 'JIRA_TOKEN')]) {
              sh '''
              curl -X GET \
              -H "Authorization: Bearer $JIRA_TOKEN" \
              --url "https://jiraent.cms.gov/rest/api/2/issue/DEMOS-858/transitions" | jq '.transitions[] | "\\(.name) - \\(.id)"'
              '''


              def tickets = closedIssues.readLines()
              for (ticket in tickets) {
                withEnv(["TICKET_NUMBER=${ticket}"]) {
                def status = sh(script: '''
                    TICKET_INFO=$(curl -H "Authorization: Bearer $JIRA_TOKEN" --url "https://jiraent.cms.gov/rest/api/2/issue/${TICKET_NUMBER}")
                    TICKET_STATUS=$(echo "$TICKET_INFO" | jq -r '.fields.status.name')

                    if [ "$TICKET_STATUS" != "In Review" ]; then
                      exit 2
                    fi

                    QA_REQUIRED=$(echo "$TICKET_INFO" | jq -r 'any(.fields.labels[]; . == "QA-Required")')
                    if [ "$QA_REQUIRED" != "true" ]; then
                      exit 1
                    else
                      exit 0
                    fi
                  ''', returnStatus: true)
                if (status == 2) {
                  echo "Ticket $ticket is not in review, skipping."
                } else if (status == 1) {
                  echo "Ticket $ticket does not need QA, marking as done"
                  updateAndComment("41")
                } else {
                  if ("${env.BRANCH_NAME}" == "DEMOS-840-jira-jenkins") {
                    updateAndComment("71")
                  } else if ("${env.BRANCH_NAME}" == "DEMOS-841-mock-test") {
                    updateAndComment("61", "Code has been merged to TEST")
                  }
                }

              }
            }
          }
          echo "done"
        }
      }
    }

  }
  }
}
