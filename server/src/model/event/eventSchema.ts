import { gql } from "graphql-tag";

import { User } from "../user/userSchema.js";
import { Bundle, Role } from "../../types.js";

export const eventSchema = gql`
  """
  Event represents a user action or system event.
  """
  type Event {
    id: ID! # From B/E (generated by Prisma)
    user: User # From B/E
    eventType: String! # From F/E
    withRole: Role # From B/E
    logLevel: String! # From F/E
    route: String! # From F/E
    createdAt: DateTime! # From B/E (generated by Prisma)
    eventData: JSONObject! # From F/E
    bundle: Bundle # From B/E (nullable relation)
  }

  type Query {
    # Return only events that have a non-null bundleId (your requirement)
    events: [Event!]!
    # Optional: focused fetch for a single bundle
    eventsByBundle(bundleId: String!): [Event!]!
  }

  type Mutation {
    logEvent(input: LogEventInput!): EventLoggedStatus!
  }

  """
  Some event inputs come from the client and others will
  need to be populated by the server for a full event record.
  """
  input LogEventInput {
    eventType: String!
    logLevel: String!
    route: String!
    eventData: JSONObject
    bundleId: String
  }

  type EventLoggedStatus {
    success: Boolean!
    message: String
  }
`;

export interface Event {
  id: string;
  user?: User;
  eventType: string;
  logLevel: string;
  withRole?: Role;
  route: string;
  createdAt: Date;
  eventData: object;
  bundle?: Bundle;
}

export interface LogEventInput {
  eventType: string;
  logLevel: string;
  route: string;
  eventData?: object;
  bundleId?: string;
}

export interface EventLoggedStatus {
  success: boolean;
  message?: string;
}
